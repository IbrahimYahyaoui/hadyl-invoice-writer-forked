{"version":3,"sources":["assets/stamp.png","assets/blanc.png","assets/cover.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Paragraph","Typography","TextArea","Input","formatter","Intl","NumberFormat","style","currency","App","cover","document","querySelector","useState","mode","setMode","titleText","setTitleText","bodyText","setBodyText","headText","setHeadText","total","setTotal","accountBank","setAccountBank","accountName","setAccountName","accountNb","setAccountNb","accountSwift","setAccountSwift","qty","desc","unit","price","items","setItems","uid","setUid","useEffect","src","BillCover","title","prevItems","useRef","JSON","stringify","every","e","current","className","editable","tooltip","onChange","x","placeholder","bordered","value","target","rows","defaultValue","Date","toISOString","split","map","item","i","n","Number","parseFloat","toFixed","reduce","t","stamp","loading","alt","type","shape","size","icon","PlusCircleOutlined","onClick","length","checkedChildren","unCheckedChildren","defaultChecked","BlancCover","width","height","PrinterOutlined","fontSize","format","setTimeout","window","print","disabled","BranchesOutlined","require","version","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.81a4ade4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/stamp.fcad2595.png\";","export default __webpack_public_path__ + \"static/media/blanc.b8984366.png\";","export default __webpack_public_path__ + \"static/media/cover.4060cea8.png\";","import { useEffect, useRef, useState } from \"react\";\nimport { Input, Button, Switch, Typography } from \"antd\";\nimport {\n  PrinterOutlined,\n  PlusCircleOutlined,\n  BranchesOutlined,\n} from \"@ant-design/icons\";\nimport stamp from \"./assets/stamp.png\";\nimport BlancCover from \"./assets/blanc.png\";\nimport BillCover from \"./assets/cover.png\";\n\nconst { Paragraph } = Typography;\nconst { TextArea } = Input;\n\nconst formatter = new Intl.NumberFormat(\"fr-FR\", {\n  style: \"currency\",\n  currency: \"EUR\",\n});\n\nfunction App() {\n  const cover = document.querySelector(\"#page-bg\") as HTMLImageElement;\n\n  // Bill or Blanc document\n  const [mode, setMode] = useState<\"BILL\" | \"BLANC\">(\"BILL\");\n\n  // Blanc state\n  const [titleText, setTitleText] = useState<string>(\"\");\n  const [bodyText, setBodyText] = useState<string>(\"\");\n  const [headText, setHeadText] = useState<string>(\"\");\n\n  // Bill state\n  const [total, setTotal] = useState<string>(\"\");\n  const [accountBank, setAccountBank] = useState<string>(\"Attijari BANK\");\n  const [accountName, setAccountName] = useState<string>(\"Ste HADYL Consult\");\n  const [accountNb, setAccountNb] = useState<string>(\"04034120004048782978\");\n  const [accountSwift, setAccountSwift] = useState<string>(\"BSTUTNTT\");\n  const [items, setItems] = useState<\n    {\n      qty: string;\n      desc: string;\n      unit: string;\n      price: string;\n      total: string;\n    }[]\n  >([\n    {\n      qty: \"\",\n      desc: \"\",\n      unit: \"\",\n      price: \"\",\n      total: \"\",\n    },\n  ]);\n  const [uid, setUid] = useState<string>(\"\");\n\n  useEffect(() => {\n    cover.src = BillCover;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (uid) document.title = `Invoice #${uid}`;\n  }, [uid]);\n\n  const prevItems = useRef(items);\n  useEffect(() => {\n    if (\n      JSON.stringify(prevItems) !== JSON.stringify(items) &&\n      items.every((e) => e.qty && e.price)\n    ) {\n      prevItems.current = items;\n      //calculate();\n    }\n  }, [items]);\n\n  const print = () => {\n    setItems(\n      items.map((e) => ({\n        ...e,\n        price: formatter.format(Number.parseFloat(e.price)),\n        total: formatter.format(Number.parseFloat(e.total)),\n      }))\n    );\n    setTotal(formatter.format(Number.parseFloat(total)));\n    setTimeout(() => {\n      window.print();\n      setTimeout(() => {\n        setUid(\"\");\n        setTotal(\"\");\n        setItems([\n          {\n            qty: \"\",\n            desc: \"\",\n            unit: \"\",\n            price: \"\",\n            total: \"\",\n          },\n        ]);\n      }, 1000);\n    }, 500);\n  };\n\n  const changeMode = (value: boolean) => {\n    if (mode === \"BILL\") {\n      cover.src = BlancCover;\n      setMode(\"BLANC\");\n    } else {\n      cover.src = BillCover;\n      setMode(\"BILL\");\n    }\n  };\n\n  return (\n    <>\n      {mode === \"BILL\" ? (\n        <>\n          <div className=\"t m0 x1 h2 y1 ff1 fs0 fc0 sc0 ls0 ws0 fw\">\n            Invoice\n          </div>\n          <div className=\"t m0 x2 h3 y2 ff1 fs1 fc0 sc0 ls0 ws0\">Number #</div>\n          <div className=\"t m0 x3 h4 y3 ff1 fs2 fc0 sc0 ls1 ws1\">\n            To<span className=\"_ _1\"></span>:\n          </div>\n          <div className=\"t m0 x3 h4 y4 ff1 fs2 fc0 sc0 ls0 ws0\">Date:</div>\n          <span className=\"t-c-1\">Qty</span>\n          <span className=\"t-c-2\">Description</span>\n          <span className=\"t-c-3\">Unit</span>\n          <span className=\"t-c-4\">Unit price</span>\n          <span className=\"t-c-5\">Amount</span>\n          <div className=\"input-net-text\">Net to pay</div>\n          <div className=\"t m0 x6 h7 y7 ff3 fs1 fc1 sc0 ls0 ws0\">\n            SAP Integration - Maintenance - Support\n          </div>\n          <div className=\"t m0 x7 h8 y8 ff1 fs4 fc0 sc0 ls0 ws0\">\n            Payment Details\n          </div>\n          <div className=\"t m0 x7 h9 y9 ff4 fs4 fc0 sc0 ls0 ws0\">\n            <table className=\"fst\">\n              <tbody>\n                <tr>\n                  <th>Bank:</th>\n                  <td>\n                    <Paragraph\n                      className=\"input-account\"\n                      editable={{\n                        tooltip: \"Cliquez pour modifier le nom de banque\",\n                        onChange: (x) => setAccountBank(x),\n                      }}\n                    >\n                      {accountBank}\n                    </Paragraph>\n                  </td>\n                </tr>\n                <tr>\n                  <th>Account Name:</th>\n                  <td>\n                    <Paragraph\n                      className=\"input-account\"\n                      editable={{\n                        tooltip: \"Cliquez pour modifier le nom de compte\",\n                        onChange: (x) => setAccountName(x),\n                      }}\n                    >\n                      {accountName}\n                    </Paragraph>\n                  </td>\n                </tr>\n                <tr>\n                  <th>Account Number:</th>\n                  <td>\n                    <Paragraph\n                      className=\"input-account\"\n                      editable={{\n                        tooltip: \"Cliquez pour modifier le numéro de compte\",\n                        onChange: (x) => setAccountNb(x),\n                      }}\n                    >\n                      {accountNb}\n                    </Paragraph>\n                  </td>\n                </tr>\n                <tr>\n                  <th>Swif Code:</th>\n                  <td>\n                    <Paragraph\n                      className=\"input-account\"\n                      editable={{\n                        tooltip: \"Cliquez pour modifier le type de compte\",\n                        onChange: (x) => setAccountSwift(x),\n                      }}\n                    >\n                      {accountSwift}\n                    </Paragraph>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <Input\n            className=\"input-uid\"\n            placeholder=\"2021XXXXX\"\n            bordered={false}\n            value={uid}\n            onChange={(e) => setUid(e.target.value)}\n          />\n          <TextArea\n            className=\"input-customer\"\n            placeholder=\"Ste Foulen Foulani\"\n            bordered={false}\n            rows={3}\n          />\n          <Input\n            className=\"input-date\"\n            placeholder=\"2021/01/01\"\n            bordered={false}\n            defaultValue={new Date().toISOString().split(\"T\")[0]}\n          />\n          <table className=\"input-items\">\n            <tbody>\n              {items.map((item, i) => (\n                <tr key={i}>\n                  <td>\n                    <Input\n                      className=\"input-item-qty\"\n                      placeholder=\"x\"\n                      bordered={false}\n                      value={item.qty}\n                      onChange={(e) => {\n                        setItems(\n                          items.map((x, n) =>\n                            n === i\n                              ? {\n                                  ...items[n],\n                                  qty: e.target.value,\n                                  total: `${(\n                                    Number.parseFloat(x.price || \"0\") *\n                                    Number.parseFloat(e.target.value)\n                                  ).toFixed(2)}`,\n                                }\n                              : x\n                          )\n                        );\n                        setTotal(\n                          `${items\n                            .reduce(\n                              (t, x, n) =>\n                                t +\n                                Number.parseFloat(\n                                  n === i ? e.target.value : x.qty\n                                ) *\n                                  Number.parseFloat(x.price),\n                              0\n                            )\n                            .toFixed(2)}`\n                        );\n                      }}\n                    />\n                  </td>\n                  <td>\n                    <TextArea\n                      className=\"input-item-desc\"\n                      placeholder=\"Item name and/or description\"\n                      bordered={false}\n                      value={item.desc}\n                      onChange={(e) =>\n                        setItems(\n                          items.map((x, n) =>\n                            n === i ? { ...items[n], desc: e.target.value } : x\n                          )\n                        )\n                      }\n                    />\n                  </td>\n                  <td>\n                    <Input\n                      className=\"input-item-unit\"\n                      placeholder=\"pc\"\n                      bordered={false}\n                      value={item.unit}\n                      onChange={(e) =>\n                        setItems(\n                          items.map((x, n) =>\n                            n === i ? { ...items[n], unit: e.target.value } : x\n                          )\n                        )\n                      }\n                    />\n                  </td>\n                  <td>\n                    <Input\n                      className=\"input-item-price\"\n                      placeholder=\"0 000 €\"\n                      bordered={false}\n                      value={item.price}\n                      onChange={(e) => {\n                        setItems(\n                          items.map((x, n) =>\n                            n === i\n                              ? {\n                                  ...items[n],\n                                  qty: x.qty || \"1\",\n                                  price: e.target.value,\n                                  total: `${(\n                                    Number.parseFloat(x.qty || \"1\") *\n                                    Number.parseFloat(e.target.value)\n                                  ).toFixed(2)}`,\n                                }\n                              : x\n                          )\n                        );\n                        setTotal(\n                          `${items\n                            .reduce(\n                              (t, x, n) =>\n                                t +\n                                Number.parseFloat(x.qty) *\n                                  Number.parseFloat(\n                                    n === i ? e.target.value : x.price\n                                  ),\n                              0\n                            )\n                            .toFixed(2)}`\n                        );\n                      }}\n                    />\n                  </td>\n                  <td>\n                    <Input\n                      className=\"input-item-total\"\n                      placeholder=\"0 000 €\"\n                      bordered={false}\n                      value={item.total}\n                      onChange={(e) =>\n                        setItems(\n                          items.map((x, n) =>\n                            n === i ? { ...items[n], total: e.target.value } : x\n                          )\n                        )\n                      }\n                    />\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <Input\n            className=\"input-sub-text\"\n            placeholder=\"Total\"\n            bordered={false}\n          />\n          <Input className=\"input-sub\" placeholder=\"9 999 €\" bordered={false} />\n          <Input\n            className=\"input-price-text\"\n            placeholder=\"Discount\"\n            bordered={false}\n          />\n          <Input className=\"input-price\" placeholder=\"999 €\" bordered={false} />\n          <Input\n            className=\"input-net\"\n            placeholder=\"9 000 €\"\n            bordered={false}\n            onChange={(e) => setTotal(e.target.value)}\n            value={total}\n          />\n          <TextArea\n            className=\"input-note\"\n            placeholder=\"More info\"\n            bordered={false}\n            rows={4}\n          />\n          <img\n            className=\"stamp\"\n            src={stamp}\n            loading=\"eager\"\n            alt=\"Signature & stamp\"\n          />\n          <Button\n            className=\"btn-add-item\"\n            type=\"primary\"\n            shape=\"circle\"\n            size=\"large\"\n            icon={<PlusCircleOutlined />}\n            onClick={() => {\n              if (items.length < 6)\n                setItems([\n                  ...items,\n                  {\n                    qty: \"\",\n                    desc: \"\",\n                    unit: \"\",\n                    price: \"\",\n                    total: \"\",\n                  },\n                ]);\n            }}\n          />\n        </>\n      ) : (\n        <>\n          <Input\n            className=\"text-title\"\n            placeholder=\"Titre de document\"\n            bordered={false}\n            onChange={(e) => setTitleText(e.target.value)}\n            value={titleText}\n          />\n          <TextArea\n            className=\"text-body\"\n            placeholder=\"Contenu de document...\"\n            bordered={false}\n            rows={15}\n            onChange={(e) => setBodyText(e.target.value)}\n            value={bodyText}\n          />\n          <TextArea\n            className=\"text-note\"\n            placeholder=\"Adresse / Tél...\"\n            bordered={false}\n            rows={4}\n            onChange={(e) => setHeadText(e.target.value)}\n            value={headText}\n          />\n        </>\n      )}\n      <Switch\n        className=\"btn-mode\"\n        checkedChildren=\"Facture\"\n        unCheckedChildren=\"Papier vide\"\n        defaultChecked={mode === \"BILL\"}\n        onChange={changeMode}\n      />\n      <Button\n        className=\"btn-print\"\n        shape=\"circle\"\n        size=\"large\"\n        style={{ width: 50, height: 50 }}\n        icon={<PrinterOutlined style={{ fontSize: 30 }} />}\n        onClick={print}\n        disabled={\n          (mode === \"BILL\" && (!uid || !total || total === \"NaN\")) ||\n          (mode === \"BLANC\" && (!titleText || !bodyText))\n        }\n      />\n      <span className=\"version\">\n        <BranchesOutlined /> version: {require(\"../package.json\").version}\n      </span>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}